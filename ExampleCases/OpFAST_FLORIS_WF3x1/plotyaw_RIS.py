import matplotlib.pyplot as plt
import numpy
import pandas as pd
import control.matlab as cnt
import cp
import scipy.optimize as optim

dfdata = pd.read_csv('t1.T1.out', sep='\t', header=None, skiprows=10)
datadata = dfdata.values
dfdata2 = pd.read_csv('t2.T2.out', sep='\t', header=None, skiprows=10)
datadata2 = dfdata2.values
dfdata3 = pd.read_csv('t3.T3.out', sep='\t', header=None, skiprows=10)
datadata3 = dfdata3.values
iT = 0
nT = 3
nend = 30000
df = pd.read_csv('EPOWER.txt', header=None)
data = df.values[iT::nT,:]
df6 = pd.read_csv('ECROSS.txt', header=None)
data6 = df6.values[iT::nT,:]
df8 = pd.read_csv('EWIND.txt', header=None)
data8 = df8.values[iT::nT,:]

plt.plot(datadata[:,0], datadata[:,23], 'b', label = 'T1')
plt.plot(datadata2[:,0], datadata2[:,23], 'r', label = 'T2')
plt.plot(datadata3[:,0], datadata3[:,23], 'g', label = 'T3')
plt.title("Ct", fontsize = 20)
plt.ylabel("Thrust Coefficient", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.legend(fontsize = 20)
plt.ylim(0.6, 1)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0]), len(datadata2[:,0]), len(datadata3[:,0])])
print(datadata3[:nn:,51])
plt.plot(datadata[:nn:,0], datadata[:nn:,51], 'b',label='T1')
plt.plot(datadata2[:nn:,0], datadata2[:nn:,51], 'r',label='T2')
plt.plot(datadata3[:nn:,0], datadata3[:nn:,51], 'g',label='T3')
plt.title("Cp", fontsize = 20)
plt.ylabel("Cp", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(0, 0.6)
plt.legend(fontsize = 20)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag = numpy.power(numpy.power(datadata[:nn:,1], 2) + numpy.power(datadata[:nn:,2], 2), 0.5)
fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2] - numpy.multiply(Wind_mag, numpy.sin(datadata[:nn:,21] * numpy.pi/180.0)), datadata[:,1])*180/numpy.pi,'r', label = 'T1 S.O.R.')
axes[0].plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2], datadata[:nn:,1])*180.0/numpy.pi, 'g', label = 'WIND FARM S.O.R.')
axes[0].set_title("Wind Direction", fontsize = 20)
axes[0].set_ylabel("Wind Direction (deg)", fontsize = 20)
#axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].legend(fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata[:,0], numpy.ones(len(Wind_mag))*9.2694, 'b')
axes[1].set_title("T1 Wind Speed \n Magnitude", fontsize = 20)
axes[1].set_ylabel("T1 Wind Speed (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag2 = numpy.power(numpy.power(datadata2[:nn:,1], 2) + numpy.power(datadata2[:nn:,2], 2), 0.5)
fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata2[:nn:,0], numpy.arctan2(datadata2[:nn:,2] - numpy.multiply(Wind_mag2, numpy.sin(datadata2[:nn:,21] * numpy.pi/180.0)), datadata2[:,1])*180/numpy.pi,'r', label = 'T2 S.O.R.')
axes[0].plot(datadata2[:nn:,0], numpy.arctan2(datadata2[:nn:,2], datadata2[:nn:,1])*180.0/numpy.pi, 'g', label = 'WIND FARM S.O.R.')
axes[0].set_title("Wind Direction", fontsize = 20)
axes[0].set_ylabel("Wind Direction (deg)", fontsize = 20)
#axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].legend(fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata2[:,0], Wind_mag2, 'b')
axes[1].set_title("T2 Wind Speed \n Magnitude", fontsize = 20)
axes[1].set_ylabel("T2 Wind Speed (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag3 = numpy.power(numpy.power(datadata3[:nn:,1], 2) + numpy.power(datadata3[:nn:,2], 2), 0.5)
fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata3[:nn:,0], numpy.arctan2(datadata3[:nn:,2] - numpy.multiply(Wind_mag3, numpy.sin(datadata3[:nn:,21] * numpy.pi/180.0)), datadata3[:,1])*180/numpy.pi,'r', label = 'T3 S.O.R.')
axes[0].plot(datadata3[:nn:,0], numpy.arctan2(datadata3[:nn:,2], datadata3[:nn:,1])*180.0/numpy.pi, 'g', label = 'WIND FARM S.O.R.')
axes[0].set_title("Wind Direction", fontsize = 20)
axes[0].set_ylabel("Wind Direction (deg)", fontsize = 20)
#axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].legend(fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata3[:,0], Wind_mag3, 'b')
axes[1].set_title("T3 Wind Speed \n Magnitude", fontsize = 20)
axes[1].set_ylabel("T3 Wind Speed (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag = numpy.power(numpy.power(datadata[:nn:,1], 2) + numpy.power(datadata[:nn:,2], 2), 0.5)
plt.plot(data6[:nn:,2], numpy.arctan2(data6[:nn:,0], data8[:nn:,0])*180/numpy.pi - numpy.arctan2(datadata[:nn:,2] - numpy.multiply(Wind_mag, numpy.sin(datadata[:nn:,21] * numpy.pi/180.0)), datadata[:,1])*180/numpy.pi , 'b')
plt.title("ERROR OF ORIGINAL CROSS WIND ESTIMATE YAW ERROR", fontsize = 20)
plt.xlabel("SIMULATED TIME (s)", fontsize = 20)
plt.ylabel("WIND RELATIVE YAW ERROR", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-5,5)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag = numpy.power(numpy.power(datadata[:nn:,1], 2) + numpy.power(datadata[:nn:,2], 2), 0.5)
plt.plot(data6[:nn:,2], numpy.arctan2(data6[:nn:,1], data8[:nn:,0])*180/numpy.pi - numpy.arctan2(datadata[:nn:,2] - numpy.multiply(Wind_mag, numpy.sin(datadata[:nn:,21] * numpy.pi/180.0)), datadata[:,1])*180/numpy.pi , 'b')
plt.title("ERROR OF MODIFIED CROSS WIND ESTIMATE YAW ERROR", fontsize = 20)
plt.xlabel("SIMULATED TIME (s)", fontsize = 20)
plt.ylabel("WIND RELATIVE YAW ERROR", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-5,5)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0]), len(datadata2[:,0]), len(datadata3[:,0])])
plt.plot(datadata[:nn:,0], datadata[:nn:,52], 'b')
plt.title("Cp T1", fontsize = 20)
plt.ylabel("Cp", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(0, 0.6)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0]), len(datadata2[:,0]), len(datadata3[:,0])])
plt.plot(data8[:nn:,1], numpy.multiply(data8[:nn:,0] - datadata[:nn:,1], 1/datadata[:nn:,1]), 'b')
plt.title("Wind Observer T1 Error", fontsize = 20)
plt.ylabel("Wind Axial Speed Error", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-1, 1)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0]), len(datadata2[:,0]), len(datadata3[:,0])])
plt.plot(data8[:nn:,1], numpy.multiply(data8[:nn:,0] - datadata2[:nn:,1], 1/datadata2[:nn:,1]), 'b')
plt.title("Wind Observer T2 Error", fontsize = 20)
plt.ylabel("Wind Axial Speed Error", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-1, 1)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0]), len(datadata2[:,0]), len(datadata3[:,0])])
plt.plot(data8[:nn:,1], numpy.multiply(data8[:nn:,0] - datadata3[:nn:,1], 1/datadata3[:nn:,1]), 'b')
plt.title("Wind Observer T3 Error", fontsize = 20)
plt.ylabel("Wind Axial Speed Error", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-1, 1)
plt.show()

plt.plot(datadata[:,0], datadata[:,1], 'r', label = 'Real')
plt.plot(data8[:,1], data8[:,0], 'b', label = 'Observed')
plt.title("Wind Observer T1", fontsize = 20)
plt.ylabel("Wind Axial Speed (m/s)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.legend(fontsize = 20)
plt.ylim(0, 15)
plt.show()

plt.plot(datadata2[:,0], datadata2[:,1], 'r', label = 'Real')
plt.plot(data8[:,1], data8[:,0], 'b', label = 'Observed')
plt.title("Wind Observer T2", fontsize = 20)
plt.ylabel("Wind Axial Speed (m/s)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.legend(fontsize = 20)
plt.ylim(0, 15)
plt.show()

plt.plot(datadata3[:,0], datadata3[:,1], 'r', label = 'Real')
plt.plot(data8[:,1], data8[:,0], 'b', label = 'Observed')
plt.title("Wind Observer T3", fontsize = 20)
plt.ylabel("Wind Axial Speed (m/s)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.legend(fontsize = 20)
plt.ylim(0, 15)
plt.show()

plt.plot(datadata[:,0], datadata[:,23], 'b', label = 'T1')
plt.plot(datadata2[:,0], datadata2[:,23], 'r', label = 'T2')
plt.plot(datadata3[:,0], datadata3[:,23], 'g', label = 'T3')
plt.title("Ct", fontsize = 20)
plt.ylabel("Thrust Coefficient", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.legend(fontsize = 20)
plt.ylim(0.6, 1)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag = numpy.power(numpy.power(datadata[:nn:,1], 2) + numpy.power(datadata[:nn:,2], 2), 0.5)
plt.plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2] - numpy.multiply(Wind_mag, numpy.sin(datadata[:nn:,21] * numpy.pi/180.0)), datadata[:,1])*180/numpy.pi,'r', label = 'T1 S.O.R.')
plt.plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2], datadata[:nn:,1])*180.0/numpy.pi, 'g', label = 'WIND FARM S.O.R.')
plt.title("WIND DIRECTION", fontsize = 20)
plt.xlabel("SIMULATED TIME (s)", fontsize = 20)
plt.ylabel("WIND RELATIVE YAW ERROR (deg)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-35,35)
plt.legend(fontsize = 20)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2] - numpy.multiply(Wind_mag, numpy.sin(datadata[:nn:,21] * numpy.pi/180.0)), datadata[:,1])*180/numpy.pi,'r', label = 'T1 S.O.R.')
axes[0].plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2], datadata[:nn:,1])*180.0/numpy.pi, 'g', label = 'WIND FARM S.O.R.')
axes[0].set_title("Wind Direction", fontsize = 20)
axes[0].set_ylabel("Wind Direction (deg)", fontsize = 20)
#axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].legend(fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata[:,0], datadata[:,1], 'b')
axes[1].set_title("T1 Wind Speed \n X-axis of Reference Farm Layout", fontsize = 20)
axes[1].set_ylabel("T1 Wind Speed (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

nn = min([len(data6[:,0]), len(data8[:,0]), len(datadata[:,0])])
Wind_mag = numpy.power(numpy.power(datadata[:nn:,1], 2) + numpy.power(datadata[:nn:,2], 2), 0.5)
plt.plot(data6[:nn:,2], numpy.arctan2(data6[:nn:,0], data8[:nn:,0])*180/numpy.pi, 'b', label = 'Original')
plt.plot(data6[:nn:,2], numpy.arctan2(data6[:nn:,1], data8[:nn:,0])*180/numpy.pi, 'y', label = 'NN modified')
plt.plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2] - numpy.multiply(Wind_mag, numpy.sin(datadata[:nn:,21] * numpy.pi/180.0)), datadata[:,1])*180/numpy.pi,'r', label = 'Relative S.o.R.')
plt.plot(datadata[:nn:,0], numpy.arctan2(datadata[:nn:,2], datadata[:nn:,1])*180.0/numpy.pi, 'g', label = 'Absolute S.o.R.')
plt.title("CROSS WIND ESTIMATE YAW ERROR", fontsize = 20)
plt.xlabel("SIMULATED TIME (s)", fontsize = 20)
plt.ylabel("WIND RELATIVE YAW ERROR (deg)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(-35,35)
plt.legend(fontsize = 20)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata[:,0], datadata[:,1], 'b')
axes[0].set_title("Wind X T1", fontsize = 20)
axes[0].set_ylabel("Wind X (m/s)", fontsize = 20)
axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata[:,0], datadata[:,2], 'r')
axes[1].set_title("Wind Y T1", fontsize = 20)
axes[1].set_ylabel("Wind Y (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

plt.plot(datadata[:,0], datadata[:,1], 'b', datadata2[:,0], datadata2[:,1], 'r' ,datadata3[:,0], datadata3[:,1], 'g')
plt.title("Wind U", fontsize = 20)
plt.ylabel("Wind U (m/s)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.show()

plt.plot(datadata2[:,0], datadata2[:,1], 'b')
plt.title("Wind U", fontsize = 20)
plt.ylabel("Wind U (m/s)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.show()

plt.plot(datadata3[:,0], datadata3[:,1], 'b')
plt.title("Wind U", fontsize = 20)
plt.ylabel("Wind U (m/s)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata2[:,0], datadata2[:,1], 'b')
axes[0].set_title("Wind X T2", fontsize = 20)
axes[0].set_ylabel("Wind X (m/s)", fontsize = 20)
axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata2[:,0], datadata2[:,2], 'r')
axes[1].set_title("Wind Y T2", fontsize = 20)
axes[1].set_ylabel("Wind Y (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata3[:,0], datadata3[:,1], 'b')
axes[0].set_title("Wind X T3", fontsize = 20)
axes[0].set_ylabel("Wind X (m/s)", fontsize = 20)
axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[1].plot(datadata3[:,0], datadata3[:,2], 'r')
axes[1].set_title("Wind Y T3", fontsize = 20)
axes[1].set_ylabel("Wind Y (m/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata[:,0], datadata[:,21], 'b')
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[0].set_title("Yaw Position T1", fontsize = 20)
axes[0].set_ylabel("Yaw Angle (deg)", fontsize = 20)
axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].plot(datadata[:,0], datadata[:,22], 'r')
axes[1].set_title("Yaw Speed T1", fontsize = 20)
axes[1].set_ylabel("Yaw Angular Speed (deg/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata2[:,0], datadata2[:,21], 'b')
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[0].set_title("Yaw Position T2", fontsize = 20)
axes[0].set_ylabel("Yaw Angle (deg)", fontsize = 20)
axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].plot(datadata2[:,0], datadata2[:,22], 'r')
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
axes[1].set_title("Yaw Speed T2", fontsize = 20)
axes[1].set_ylabel("Yaw Angular Speed (deg/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
plt.show()

fig, axes = plt.subplots(2,sharex = True)
axes[0].plot(datadata3[:,0], datadata3[:,21], 'b')
axes[0].tick_params(axis="x", labelsize=20)
axes[0].tick_params(axis="y", labelsize=20)
axes[0].set_title("Yaw Position T3", fontsize = 20)
axes[0].set_ylabel("Yaw Angle (deg)", fontsize = 20)
axes[0].set_xlabel("Simulated Time (s)", fontsize = 20)
axes[1].plot(datadata3[:,0], datadata3[:,22], 'r')
axes[1].tick_params(axis="x", labelsize=20)
axes[1].tick_params(axis="y", labelsize=20)
axes[1].set_title("Yaw Speed T3", fontsize = 20)
axes[1].set_ylabel("Yaw Angular Speed (deg/s)", fontsize = 20)
axes[1].set_xlabel("Simulated Time (s)", fontsize = 20)
plt.show()

plt.plot(datadata[:,0], datadata[:,52], 'b', label = 'T1')
plt.plot(datadata2[:,0], datadata2[:,52],'r', label = 'T2')
plt.plot(datadata3[:,0], datadata3[:,52], 'g', label = 'T3')
plt.title("POWER", fontsize = 20)
plt.ylabel("POWER (kW)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.legend(fontsize = 20)
plt.show()

nn = min([len(datadata[:,0]), len(datadata2[:,0]), len(datadata3[:,0])])
plt.plot(datadata[:nn:,0], datadata[:nn:,52]+datadata2[:nn:,52]+datadata3[:nn:,52],'g')
plt.title("POWER TOTAL", fontsize = 20)
plt.ylabel("POWER TOTAL (kW)", fontsize = 20)
plt.xlabel("Simulated Time (s)", fontsize = 20)
plt.xticks(fontsize=20, rotation=0)
plt.yticks(fontsize=20, rotation=0)
plt.ylim(4000,7000)
plt.show()